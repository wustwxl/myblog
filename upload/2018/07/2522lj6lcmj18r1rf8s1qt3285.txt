
微服务优点：
解耦-每个服务足够内聚，独立运行。
开发效率-快速开发，易于维护。
语言-微服务可使用不同语言开发。
集成-易于和第三方集成。
存储-可连接独立数据库。

缺点：
通信问题-调用超时问题。 
部署问题-微服务数量过多。
数据问题-数据一致性问题。

案例：
医院/科室；
国家/省市。


CAP理论：
CAP （C强一致性 A可用性 P分区容错性）
一个分布式系统不可能同时很好的满足CAP，只能三选二。

传统的关系型数据库 ==== ACID（A原子性 C一致性 I独立性 D持久性）
A原子性：事务里所有操作要么全部做完，要么都不做，只要有一个操作失败，整个事务回滚，比如银行转账。
I独立性：并发的事务之间不会相互影响。

NOSQL数据库 ==== CAP （C强一致性 A可用性 P分区容错性）
Redis（满足CP）


Eureka服务注册与发现。
Eureka和Zookeeper的区别：
Eureka 保证的是 AP原则
Zookeeper 保证的是 CP原则



Ribbon负载均衡。
======客户端 负载均衡，可自定义算法。


Feign负载均衡。
======只需要创建一个接口，然后在上面添加注解就可以（面向服务接口调用微服务）

Feign集成了Ribbon，默认使用轮询。
Feign面向接口编程，新建接口，添加FeignClient注解配置服务名称，通过接口进行调用。
Ribbon面向RestTemplate编程，添加@LoadBalanced注解，进行调用。


Hystrix断路器

服务熔断
一般是某个服务异常引起的, 调用一个特定的服务达到一定阈值(在Hystrix里默认是5秒内20个失败), 直接熔断整个服务，而不是一直等到此服务超时。
开发人员能够提供错误原因和开启一个断路由回调。

服务降级
一般是从整体负荷考虑。
客户端实现一个本地的fallback回调，返回一个缺省值, 此时服务提供方不再被调用。

服务监控
七色一圈一线
豪猪Dashboard  ===  http://localhost:9001/hystrix



zuul路由网关
通过与Eureka整合，将自身注册到服务中心，可以获到所有其他微服务实例信息。
Zuul默认通过以服务名作为ContextPath来创建路由映射，可以满足大多数情况需要，特殊路由可以通过配置来实现。



config配置中心
集中管理配置文件












11-12-13-14    47















